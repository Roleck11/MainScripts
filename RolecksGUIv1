DisableGUI = false


-- Code For GitHub
if not game:IsLoaded() then
    while not game:IsLoaded() do wait(1) end
end

for i, v in pairs(debug.getupvalue(require(game:GetService("ReplicatedStorage").Fsys).load("RouterClient").init, 4)) do
    v.Name = i
end

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
  v:Disable()
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Roleck's GUI", "DarkTheme")

-- Disable GUI to let it load
for _, gui in pairs(game.CoreGui:GetChildren()) do
    if gui:IsA("ScreenGui") and tonumber(gui.Name) then
        gui.Enabled = not gui.Enabled
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Z then
		for _, gui in pairs(game.CoreGui:GetChildren()) do
		    if gui:IsA("ScreenGui") and tonumber(gui.Name) then
		        gui.Enabled = not gui.Enabled -- Toggles the Enabled property
		    end
		end
    end
end)

local PotionTab = Window:NewTab("Potion Tab")
local PotionSection = PotionTab:NewSection("Apply Potions")
local AutoFusionSection = PotionTab:NewSection("Auto Fuse Neon / Mega")
local UpdatePetListSection = PotionTab:NewSection("Update Pet List")

local TradeTab = Window:NewTab("Trade Tab")
local TradeSection = TradeTab:NewSection("Trade System")
local AddItemSection = TradeTab:NewSection("Add Items")

local BuyItemTab = Window:NewTab("Buy Tab")
local BuyItemSection = BuyItemTab:NewSection("Buy Items")

local EventItemTab = Window:NewTab("Event Tab")
local EventItemSection = EventItemTab:NewSection("Buy Halloween Items")

local Player = game:GetService("Players").LocalPlayer

-- Remove Duplications
local function RemoveDuplicates(tbl)
    local uniqueValues = {}
    local result = {}
    
    for _, value in ipairs(tbl) do
        if not uniqueValues[value] then
            uniqueValues[value] = true
            table.insert(result, value)
        end
    end
    
    return result
end

-- Function to remove pets with "egg" and "practice_dog"
local function RemoveUselessPets(tbl)
    local result = {}
    for _, value in ipairs(tbl) do
        if not (string.match(value, "egg") or value == "practice_dog") then
            table.insert(result, value)
        end
    end
    return result
end

local dropdown
local function RefreshDropdown()
    local Pets = {}
    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        if v.properties.age < 6 then        
            table.insert(Pets, v.id)
        end
    end
    Pets = RemoveDuplicates(Pets)
    Pets = RemoveUselessPets(Pets)
    dropdown:Refresh(Pets)
end

dropdown = PotionSection:NewDropdown("Select Pet:", "DropdownInf", Pets, function(PetName)
    PetNameA = PetName
end)
RefreshDropdown()

PotionSection:NewDropdown("Type:", "DropdownInf", {"Normal", "Neon", "Both"}, function(Type)
    TypeOfPet = Type
end)

PotionSection:NewButton("Submit", "ButtonInfo", function()
    --Normal
    function APTP_Normal()
        while true do
            local Pets = {}
            local Player = game:GetService("Players").LocalPlayer
        
            function RoT(t)
            return t[math.random(1, #t)]
            end
        
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                if string.find(v.id, PetNameA) and v.properties.age < 6 and not v.properties.neon and not v.properties.mega_neon then        
                    table.insert(Pets, i)
                end
            end
        
            local randomPet = RoT(Pets)
            local args = {
                [1] = randomPet
            }
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
        
            BreakKing = true
            while BreakKing do
                for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                    if i == randomPet and v.properties.age < 6 then   
                        local Foods = {}
                        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                            if v.id == "pet_age_potion" then        
                                table.insert(Foods, i)
                            end
                        end
                    
                        local randomFood = RoT(Foods)
                        local args = {
                            [1] = randomFood
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodItem"):FireServer(unpack(args))
                        wait(0.5)
                    elseif i == randomPet and v.properties.age == 6 then
                        BreakKing = false
                        break
                    end
                end
            end
            wait(1)
        end
    end
    -- Neon
    function APTP_Neon()
        while true do
            local Pets = {}
            local Player = game:GetService("Players").LocalPlayer
        
            function RoT(t)
            return t[math.random(1, #t)]
            end
        
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                if string.find(v.id, PetNameA) and v.properties.age < 6 and v.properties.neon then        
                    table.insert(Pets, i)
                end
            end
        
            local randomPet = RoT(Pets)
            local args = {
                [1] = randomPet
            }
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
        
            BreakKing = true
            while BreakKing do
                for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                    if i == randomPet and v.properties.age < 6 then   
                        local Foods = {}
                        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                            if v.id == "pet_age_potion" then        
                                table.insert(Foods, i)
                            end
                        end
                    
                        local randomFood = RoT(Foods)
                        local args = {
                            [1] = randomFood
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodItem"):FireServer(unpack(args))
                        wait(0.5)
                    elseif i == randomPet and v.properties.age == 6 then
                        BreakKing = false
                        break
                    end
                end
            end
            wait(1)
        end
    end
    -- Both
    function APTP_Both()
        while true do
            local Pets = {}
            local Player = game:GetService("Players").LocalPlayer
        
            function RoT(t)
            return t[math.random(1, #t)]
            end
        
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                if string.find(v.id, PetNameA) and v.properties.age < 6 then        
                    table.insert(Pets, i)
                end
            end
        
            local randomPet = RoT(Pets)
            local args = {
                [1] = randomPet
            }
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
        
            BreakKing = true
            while BreakKing do
                for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                    if i == randomPet and v.properties.age < 6 then   
                        local Foods = {}
                        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                            if v.id == "pet_age_potion" then        
                                table.insert(Foods, i)
                            end
                        end
                    
                        local randomFood = RoT(Foods)
                        local args = {
                            [1] = randomFood
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodItem"):FireServer(unpack(args))
                        wait(0.5)
                    elseif i == randomPet and v.properties.age == 6 then
                        BreakKing = false
                        break
                    end
                end
            end
            wait(1)
        end
    end
    -- IF determine type
    if TypeOfPet == "Normal" then
        local success, errorMsg = pcall(APTP_Normal)
    elseif TypeOfPet == "Neon" then
        local success, errorMsg = pcall(APTP_Neon)
    elseif TypeOfPet == "Both" then
        local success, errorMsg = pcall(APTP_Both)
    end
end)

AutoFusionSection:NewButton("Auto Neon", "ButtonInfo", function()
    function AutoNeonFusion()
        while true do
            wait(0.5)
            local petNames = {}
            local Player = game:GetService("Players").LocalPlayer
    
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do  
                if v.properties.age == 6 and not v.properties.mega_neon and not v.properties.neon then        
                    table.insert(petNames, v.id)
                end
            end
    
            function RoT(t)
            return t[math.random(1, #t)]
            end
    
            -- Function to create a new table with a string removed
            local function RemoveString(originalTable, stringToRemove)
                local newTable = {}
                
                for _, value in ipairs(originalTable) do
                    if value ~= stringToRemove then
                        table.insert(newTable, value)
                    end
                end
                
                return newTable
            end
    
            -- Create a table to store the frequency count of each pet name
            local frequencyCount = {}
    
            -- Count the occurrences of each pet name
            for _, name in ipairs(petNames) do
                if frequencyCount[name] then
                    frequencyCount[name] = frequencyCount[name] + 1
                else
                    frequencyCount[name] = 1
                end
            end
    
            -- Find pet names that are repeated 4 or more times
            local repeatedPets = {}
    
            for name, count in pairs(frequencyCount) do
                if count >= 4 then
                    table.insert(repeatedPets, name)
                end
            end
    
            CorePet = RoT(repeatedPets)
            FGPets1 = {}
    
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                if string.find(v.id, CorePet) and v.properties.age == 6 and not v.properties.mega_neon and not v.properties.neon then        
                    table.insert(FGPets1, i)
                end
            end
    
            randomFG1 = RoT(FGPets1)
    
            local FGPets2 = RemoveString(FGPets1, randomFG1)
            randomFG2 = RoT(FGPets2)
    
            local FGPets3 = RemoveString(FGPets2, randomFG2)
            randomFG3 = RoT(FGPets3)
    
            local FGPets4 = RemoveString(FGPets3, randomFG3)
            randomFG4 = RoT(FGPets4)
    
            local args = {
                [1] = {
                    [1] = randomFG1,
                    [2] = randomFG2,
                    [3] = randomFG3,
                    [4] = randomFG4
                }
            }
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/DoNeonFusion"):InvokeServer(unpack(args))
        end
    end
    local success, errorMsg = pcall(AutoNeonFusion)
end)

AutoFusionSection:NewButton("Auto Mega", "ButtonInfo", function()
    function AutoMegaFusion()
        while true do
            wait(0.5)
            local petNames = {}
            local Player = game:GetService("Players").LocalPlayer
    
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do  
                if v.properties.age == 6 and v.properties.neon then        
                    table.insert(petNames, v.id)
                end
            end
    
            function RoT(t)
            return t[math.random(1, #t)]
            end
    
            -- Function to create a new table with a string removed
            local function RemoveString(originalTable, stringToRemove)
                local newTable = {}
                
                for _, value in ipairs(originalTable) do
                    if value ~= stringToRemove then
                        table.insert(newTable, value)
                    end
                end
                
                return newTable
            end
    
            -- Create a table to store the frequency count of each pet name
            local frequencyCount = {}
    
            -- Count the occurrences of each pet name
            for _, name in ipairs(petNames) do
                if frequencyCount[name] then
                    frequencyCount[name] = frequencyCount[name] + 1
                else
                    frequencyCount[name] = 1
                end
            end
    
            -- Find pet names that are repeated 4 or more times
            local repeatedPets = {}
    
            for name, count in pairs(frequencyCount) do
                if count >= 4 then
                    table.insert(repeatedPets, name)
                end
            end
    
            CorePet = RoT(repeatedPets)
            FGPets1 = {}
    
            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                if string.find(v.id, CorePet) and v.properties.age == 6 and v.properties.neon then        
                    table.insert(FGPets1, i)
                end
            end
    
            randomFG1 = RoT(FGPets1)
    
            local FGPets2 = RemoveString(FGPets1, randomFG1)
            randomFG2 = RoT(FGPets2)
    
            local FGPets3 = RemoveString(FGPets2, randomFG2)
            randomFG3 = RoT(FGPets3)
    
            local FGPets4 = RemoveString(FGPets3, randomFG3)
            randomFG4 = RoT(FGPets4)
    
            local args = {
                [1] = {
                    [1] = randomFG1,
                    [2] = randomFG2,
                    [3] = randomFG3,
                    [4] = randomFG4
                }
            }
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/DoNeonFusion"):InvokeServer(unpack(args))
        end
    end
    local success, errorMsg = pcall(AutoMegaFusion)
end)

UpdatePetListSection:NewButton("Update Pet List", "ButtonInfo", function()
    RefreshDropdown()
end)

-- Trade Tab Script
local dropdownForPlayersInServer
local function RefreshDropdownForPlayersInServer()
    local PlayersInServer = {}
    local Players = game:GetService("Players")
    local playersList = Players:GetPlayers()
    local RobloxUserOfAcc = game.Players.LocalPlayer.Name

    for _, player in pairs(playersList) do
        table.insert(PlayersInServer, player.Name)
    end
    for i, value in ipairs(PlayersInServer) do
        if value == RobloxUserOfAcc then
            table.remove(PlayersInServer, i)
            break
        end
    end
    dropdownForPlayersInServer:Refresh(PlayersInServer)
end
 
function RefreshTradeDropdownWithLoop()
    while true do
        RefreshDropdownForPlayersInServer()
        wait(2)
    end
end

dropdownForPlayersInServer = TradeSection:NewDropdown("Select Player:", "DropdownInf", PlayersInServer, function(PlayerToTrade)
    PlayerToTradeA = PlayerToTrade
end)

spawn(RefreshTradeDropdownWithLoop)

TradeSection:NewButton("Send Trade", "ButtonInfo", function()
    local args = {
        [1] = game:GetService("Players"):WaitForChild(PlayerToTradeA)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(unpack(args))
end)

TradeSection:NewButton("Accept/Confirm Trade", "ButtonInfo", function()
    while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible do
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
        wait(0.1)
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
        wait(0.1)
    end
end)

getgenv().AcceptTradesFromEveryone = false
TradeSection:NewToggle("Accept Trades from EVERYONE", "ToggleInfo", function(state)
    if state then
        getgenv().AcceptTradesFromEveryone = true
        while getgenv().AcceptTradesFromEveryone do
            for i, players in ipairs(game:GetService("Players"):GetPlayers()) do
                local args = {
                    [1] = players,
                    [2] = true
                }
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptOrDeclineTradeRequest"):InvokeServer(unpack(args))
            end
        end 
    else
        getgenv().AcceptTradesFromEveryone = false
    end
end)

AddItemSection:NewButton("Add Halloween Pets Into Trade", "ButtonInfo", function()
    function AddHalloweenPetsToTrade()
        local function RemoveString(originalTable, stringToRemove)
            local newTable = {}
            
            for _, value in ipairs(originalTable) do
                if value ~= stringToRemove then
                    table.insert(newTable, value)
                end
            end
            
            return newTable
        end
    
        local Pets1 = {}
        local Player = game:GetService("Players").LocalPlayer
    
        function RoT(t)
        return t[math.random(1, #t)]
        end
    
        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
            if string.find(v.id, "halloween")then        
                game:GetService("ReplicatedStorage"):WaitForChild("API"):FindFirstChild("TradeAPI/AddItemToOffer"):FireServer(v.unique)
            end
        end
    end
    AddHalloweenPetsToTrade()
end)

AddItemSection:NewButton("Add Halloween Toys Into Trade", "ButtonInfo", function()
    function AddHalloweenToysToTrade()
        local function RemoveString(originalTable, stringToRemove)
            local newTable = {}
            
            for _, value in ipairs(originalTable) do
                if value ~= stringToRemove then
                    table.insert(newTable, value)
                end
            end
            
            return newTable
        end
    
        local Pets1 = {}
        local Player = game:GetService("Players").LocalPlayer
    
        function RoT(t)
        return t[math.random(1, #t)]
        end
    
        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.toys) do
            if string.find(v.id, "halloween")then        
                game:GetService("ReplicatedStorage"):WaitForChild("API"):FindFirstChild("TradeAPI/AddItemToOffer"):FireServer(v.unique)
            end
        end
    end
    AddHalloweenToysToTrade()
end)

AddItemSection:NewButton("Add Halloween Pet Wear Into Trade", "ButtonInfo", function()
    function AddHalloweenToysToTrade()
        local function RemoveString(originalTable, stringToRemove)
            local newTable = {}
            
            for _, value in ipairs(originalTable) do
                if value ~= stringToRemove then
                    table.insert(newTable, value)
                end
            end
            
            return newTable
        end
    
        local Pets1 = {}
        local Player = game:GetService("Players").LocalPlayer
    
        function RoT(t)
        return t[math.random(1, #t)]
        end
    
        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pet_accessories) do
            if string.find(v.id, "halloween")then        
                game:GetService("ReplicatedStorage"):WaitForChild("API"):FindFirstChild("TradeAPI/AddItemToOffer"):FireServer(v.unique)
            end
        end
    end
    AddHalloweenToysToTrade()
end)

-- Buy Pets Tab Script
BuyItemSection:NewDropdown("Pet Name:", "DropdownInf", {"Eel", "Raccoon", "Chipmunk"}, function(PetName)
    PetCalled = string.lower(PetName)
end)

BuyItemSection:NewDropdown("Quantity:", "DropdownInf", {"1", "4", "16", "100", "1000"}, function(Quantity)
    QuantityN = tonumber(Quantity)
end)

BuyItemSection:NewButton("Submit", "ButtonInfo", function()
    if PetCalled == "eel" then
        for i = 1, QuantityN do
            local args = {
                [1] = "pets",
                [2] = "random_pets_sept_2023_eel",
                [3] = {}
            }
    
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
            wait(0.1)
        end
    elseif PetCalled == "chipmunk" then
        for i = 1, QuantityN do
            local args = {
                [1] = "pets",
                [2] = "chiprac_2023_chipmunk",
                [3] = {}
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))            
            wait(0.1)            
        end
    elseif PetCalled == "raccoon" then
        for i = 1, QuantityN do
            local args = {
                [1] = "pets",
                [2] = "chiprac_2023_raccoon",
                [3] = {}
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
            wait(0.1)            
        end
    end
end)

-- Halloween Event Buy Pets Tab Script
EventItemSection:NewDropdown("Halloween Pet Name:", "DropdownInf", {"Ghost", "Undead Elk", "Nightmare Owl"}, function(PetName)
    PetCalled = string.lower(PetName)
end)

EventItemSection:NewDropdown("Quantity:", "DropdownInf", {"1", "4", "16", "100"}, function(Quantity)
    QuantityN = tonumber(Quantity)
end)

EventItemSection:NewButton("Submit", "ButtonInfo", function()
    if PetCalled == "ghost" then
        for i = 1, QuantityN do
            local args = {
                [1] = "pets",
                [2] = "halloween_2023_ghost",
                [3] = {}
            }
    
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
            wait(0.1)
        end
    elseif PetCalled == "undead elk" then
        for i = 1, QuantityN do
            local args = {
                [1] = "pets",
                [2] = "halloween_2023_undead_elk",
                [3] = {}
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))            
            wait(0.1)            
        end
    elseif PetCalled == "nightmare owl" then
        for i = 1, QuantityN do
            local args = {
                [1] = "pets",
                [2] = "halloween_2023_nightmare_owl",
                [3] = {}
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
            wait(0.1)            
        end
    end
end)

if DisableGUI then
    -- Nothing
else
    -- Enable GUI after it loads
    for _, gui in pairs(game.CoreGui:GetChildren()) do
        if gui:IsA("ScreenGui") and tonumber(gui.Name) then
            gui.Enabled = not gui.Enabled
        end
    end
end
