if not game:IsLoaded() then
    while not game:IsLoaded() do task.wait(1) end
end

local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys")).load
local Player = game:GetService("Players").LocalPlayer

function RoT(t)
    return t[math.random(1, #t)]
end

for i, v in pairs(debug.getupvalue(require(game:GetService("ReplicatedStorage").Fsys).load("RouterClient").init, 4)) do
    v.Name = i
end

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
  v:Disable()
end

-- Remove Duplications
local function RemoveDuplicates(tbl)
    local uniqueValues = {}
    local result = {}
    
    for _, value in ipairs(tbl) do
        if not uniqueValues[value] then
            uniqueValues[value] = true
            table.insert(result, value)
        end
    end
    
    return result
end

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Title of the library", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local PotionTab = Window:MakeTab({
	Name = "Potion Tab",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

function GetPetsDropdown()
    local Pets = {}
    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        print("Pet In Acc:", v.id)
        if v.properties.age < 6 and not v.id:match("egg") and not v.id:match("practice_dog") then  
            print("Inserting into table:", v.id)      
            table.insert(Pets, v.id)
        end
    end
    Pets = RemoveDuplicates(Pets)
    print("Number of Pets:", #Pets)
    if #Pets == 0 then
        return {"No Available Pets"}
    else
        return Pets
    end
end

local Section = Tab:AddSection({
	Name = "Potion System"
})

PotionTab:AddDropdown({
	Name = "Type Dropdown",
	Default = "Both",
	Options = {"Normal", "Neon", "Both"},
	Callback = function(PetType)
		_G.SelectedPetType = PetType
	end    
})

local PetDropdown = PotionTab:AddDropdown({
	Name = "Pet Dropdown",
	Default = "None",
	Options = GetPetsDropdown(),
	Callback = function(PetName)
        _G.SelectedPet = PetName
	end    
})

PotionTab:AddButton({
	Name = "Refresh Pet Dropdown!",
	Callback = function()
        PetDropdown:Refresh(GetPetsDropdown(), true)
  	end    
})

PotionTab:AddButton({
	Name = "Submit!",
	Callback = function()
        function ApplyPotionsToPet()
            while true do
                local Pets = {}
        
                if _G.SelectedPetType == "Normal" then
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if string.find(v.id, _G.SelectedPet) and v.properties.age < 6 and not v.properties.neon and not v.properties.mega_neon then        
                            print("----- Inserting to Table To Equip", v.id, ":", i)
                            table.insert(Pets, i)
                        end
                    end
                elseif _G.SelectedPetType == "Neon" then
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if string.find(v.id, _G.SelectedPet) and v.properties.age < 6 and v.properties.neon then        
                            table.insert(Pets, i)
                        end
                    end
                elseif _G.SelectedPetType == "Both" then
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if string.find(v.id, _G.SelectedPet) and v.properties.age < 6 then        
                            table.insert(Pets, i)
                        end
                    end
                end
            
                local randomPet = RoT(Pets)
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(randomPet)
            
                BreakKing = true
                while BreakKing do
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if i == randomPet and v.properties.age < 6 then   
                            local Foods = {}
                            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                                if v.id == "pet_age_potion" then        
                                    table.insert(Foods, i)
                                end
                            end
        
                            local randomFood = RoT(Foods)
                            if Fsys("ClientData").get("pet_char_wrapper") and Fsys("ClientData").get("pet_char_wrapper")["char"] and Fsys("ClientData").get("pet_char_wrapper")["char"] ~= nil then 
                                game.ReplicatedStorage.API:FindFirstChild("PetAPI/ConsumeFoodItem"):FireServer(randomFood)
                            end
                            wait(0.5)
                        elseif i == randomPet and v.properties.age == 6 then
                            BreakKing = false
                            break
                        end
                    end
                end
                wait(1)
            end
        end
        pcall(ApplyPotionsToPet)
  	end    
})

local Section = PotionTab:AddSection({
	Name = "Auto Fuse"
})

PotionTab:AddButton({
	Name = "Auto Neon",
	Callback = function()
        pcall(function() 
            local function GetPetsData()
                return require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets
            end
            
            local function GetFilteredPets(condition)
                local filteredPets = {}
                for i, v in pairs(GetPetsData()) do
                    if condition(v) then
                        table.insert(filteredPets, i)
                    end
                end
                return filteredPets
            end
            
            local function RandomElement(table)
                return table[math.random(1, #table)]
            end
            
            local function RemoveElement(table, element)
                local newTable = {}
                for _, value in ipairs(table) do
                    if value ~= element then
                        table.insert(newTable, value)
                    end
                end
                return newTable
            end
            
            while true do
                task.wait(0.5)
                
                local petNames = {}
                local petData = GetPetsData()
                
                for _, v in pairs(petData) do
                    if v.properties.age == 6 and not v.properties.mega_neon and not v.properties.neon then        
                        table.insert(petNames, v.id)
                    end
                end
            
                local repeatedPets = {}
                local frequencyCount = {}
                for _, name in ipairs(petNames) do
                    frequencyCount[name] = (frequencyCount[name] or 0) + 1
                    if frequencyCount[name] >= 4 then
                        table.insert(repeatedPets, name)
                    end
                end
            
                local corePet = RandomElement(repeatedPets)
                local fgPets = GetFilteredPets(function(v)
                    return v.properties.age == 6 and not v.properties.mega_neon and not v.properties.neon and string.find(v.id, corePet)
                end)
            
                local args = {
                    [1] = {
                        [1] = RandomElement(fgPets),
                        [2] = RandomElement(RemoveElement(fgPets, args[1])),
                        [3] = RandomElement(RemoveElement(fgPets, args[1])),
                        [4] = RandomElement(RemoveElement(fgPets, args[1]))
                    }
                }
            
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/DoNeonFusion"):InvokeServer(unpack(args))
                
                if #petNames < 4 then
                    break
                end
            end
        end)        
  	end    
})

PotionTab:AddButton({
	Name = "Auto Mega",
	Callback = function()
      	print("mega pressed")
  	end    
})

OrionLib:Init()
