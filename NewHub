if not game:IsLoaded() then
    while not game:IsLoaded() do task.wait(1) end
end

-- Remove Duplications
local function RemoveDuplicates(tbl)
    local uniqueValues = {}
    local result = {}
    
    for _, value in ipairs(tbl) do
        if not uniqueValues[value] then
            uniqueValues[value] = true
            table.insert(result, value)
        end
    end
    
    return result
end

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Title of the library", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local Tab = Window:MakeTab({
	Name = "Tab 1",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

function GetPetsDropdown()
    local Pets = {}
    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        if v.properties.age < 6 and not v.id == "egg" and not v.id:match("practice_dog") then        
            table.insert(Pets, v.id)
        end
    end
    Pets = RemoveDuplicates(Pets)
    if #Pets == 0 then
        return {"No Available Pets"}
    else
        return Pets
    end
end

Tab:AddDropdown({
	Name = "Type Dropdown",
	Default = "Both",
	Options = {"Normal", "Neon", "Both"},
	Callback = function(PetType)
		_G.SelectedPetType = PetType
	end    
})

local PetDropdown = Tab:AddDropdown({
	Name = "Pet Dropdown",
	Default = "None",
	Options = GetPetsDropdown(),
	Callback = function(PetName)
        _G.SelectedPet = PetName

        function APTP_Normal()
            while true do
                local Pets = {}
                local Player = game:GetService("Players").LocalPlayer
            
                function RoT(t)
                return t[math.random(1, #t)]
                end
            
                for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                    if string.find(v.id, _G.SelectedPet) and v.properties.age < 6 and not v.properties.neon and not v.properties.mega_neon then        
                        table.insert(Pets, i)
                    end
                end
            
                local randomPet = RoT(Pets)
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(randomPet)
            
                BreakKing = true
                while BreakKing do
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if i == randomPet and v.properties.age < 6 then   
                            local Foods = {}
                            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                                if v.id == "pet_age_potion" then        
                                    table.insert(Foods, i)
                                end
                            end
                        
                            local randomFood = RoT(Foods)
                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodItem"):FireServer(randomFood)
                            wait(0.5)
                        elseif i == randomPet and v.properties.age == 6 then
                            BreakKing = false
                            break
                        end
                    end
                end
                wait(1)
            end
        end
        -- Neon
        function APTP_Neon()
            while true do
                local Pets = {}
                local Player = game:GetService("Players").LocalPlayer
            
                function RoT(t)
                return t[math.random(1, #t)]
                end
            
                for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                    if string.find(v.id, _G.SelectedPet) and v.properties.age < 6 and v.properties.neon then        
                        table.insert(Pets, i)
                    end
                end
            
                local randomPet = RoT(Pets)
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(randomPet)
            
                BreakKing = true
                while BreakKing do
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if i == randomPet and v.properties.age < 6 then   
                            local Foods = {}
                            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                                if v.id == "pet_age_potion" then        
                                    table.insert(Foods, i)
                                end
                            end
                        
                            local randomFood = RoT(Foods)
                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodItem"):FireServer(randomFood)
                            wait(0.5)
                        elseif i == randomPet and v.properties.age == 6 then
                            BreakKing = false
                            break
                        end
                    end
                end
                wait(1)
            end
        end
        -- Both
        function APTP_Both()
            while true do
                local Pets = {}
                local Player = game:GetService("Players").LocalPlayer
            
                function RoT(t)
                return t[math.random(1, #t)]
                end
            
                for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                    if string.find(v.id, _G.SelectedPet) and v.properties.age < 6 then        
                        table.insert(Pets, i)
                    end
                end
            
                local randomPet = RoT(Pets)
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(randomPet)
            
                BreakKing = true
                while BreakKing do
                    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
                        if i == randomPet and v.properties.age < 6 then   
                            local Foods = {}
                            for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food) do
                                if v.id == "pet_age_potion" then        
                                    table.insert(Foods, i)
                                end
                            end
                        
                            local randomFood = RoT(Foods)
                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetAPI/ConsumeFoodItem"):FireServer(randomFood)
                            wait(0.5)
                        elseif i == randomPet and v.properties.age == 6 then
                            BreakKing = false
                            break
                        end
                    end
                end
                wait(1)
            end
        end
        if _G.SelectedPetType == "Normal" then
            pcall(APTP_Normal)
        elseif TypeOfPet == "Neon" then
            pcall(APTP_Neon)
        elseif TypeOfPet == "Both" then
            pcall(APTP_Both)
        end
	end    
})

Tab:AddButton({
	Name = "Refresh Pet Dropdown!",
	Callback = function()
        PetDropdown:Refresh(GetPetsDropdown(), true)
  	end    
})

OrionLib:Init()
